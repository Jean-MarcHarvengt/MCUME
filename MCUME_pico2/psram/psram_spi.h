/******************************************************************************

rp2040-psram

Copyright © 2023 Ian Scott

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the “Software”), to deal in
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED “AS IS”, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

******************************************************************************/

/**
 * @file psram_spi.h
 *
 * \mainpage
 *
 * The interface to this file is defined in psram_spi.h. Please see the
 * documentation for this file.
 *
 * The following defines _MUST_ be defined:
 *
 * - @c PSRAM_PIN_CS - GPIO number of the chip select pin
 * - @c PSRAM_PIN_SCK - GPIO number of the clock pin
 * - @c PSRAM_PIN_MOSI - GPIO number of the MOSI pin
 * - @c PSRAM_PIN_MISO - GPIO number of the MISO pin
 *
 * Optional define:
 * - @c PSRAM_MUTEX - Define this to put PSRAM access behind a mutex. This must
 * be used if the PSRAM is to be used by multiple cores.
 *
 * Project homepage: https://github.com/polpo/rp2040-psram
 */


#pragma once
#include "iopins.h"
#include "hardware/pio.h"
#include "hardware/gpio.h"
#include "hardware/timer.h"
#include "hardware/dma.h"

#include <string.h>
 

#include "psram_spi.pio.h"

#ifdef __cplusplus
extern "C" {
#endif

#define PIO_SPI 1
#define PSRAM_WAITDMA 1
//#define QSPI 1

static uint8_t nibconv[256];

/**
 * @brief A struct that holds the configuration for the PSRAM interface.
 *
 * This struct is generated by psram_spi_init() and must be passed to all calls to
 * the psram access functions.
 */
typedef struct psram_spi_inst {
    PIO pio;
    int sm;
    uint offset;
    int write_dma_chan;
    dma_channel_config write_dma_chan_config;
    int read_dma_chan;
    dma_channel_config read_dma_chan_config;
} psram_spi_inst_t;



/**
 * @brief Write and read raw data to the PSRAM SPI PIO, driven by the CPU
 * without DMA. This can be used if DMA has not yet been initialized.
 *
 * Used to send raw commands and receive data from the PSRAM. Usually the @c
 * psram_write*() and @c psram_read*() commands should be used instead.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param src Pointer to the source data to write.
 * @param src_len Length of the source data in bytes.
 * @param dst Pointer to the destination for read data, if any. Set to 0 or NULL
 * if no data is to be read.
 * @param dst_len Length of the destination data in bytes. Set to 0 if no data
 * is to be read.
 */
__force_inline static void __time_critical_func(pio_spi_write_read_blocking)(
        psram_spi_inst_t* spi,
        const uint8_t* src, const size_t src_len,
        uint8_t* dst, const size_t dst_len
) {
    size_t tx_remain = src_len, rx_remain = dst_len;

    io_rw_8 *txfifo = (io_rw_8 *) &spi->pio->txf[spi->sm];
    while (tx_remain) {
        if (!pio_sm_is_tx_fifo_full(spi->pio, spi->sm)) {
            *txfifo = *src++;
            --tx_remain;
        }
    }

    io_rw_8 *rxfifo = (io_rw_8 *) &spi->pio->rxf[spi->sm];
    while (rx_remain) {
        if (!pio_sm_is_rx_fifo_empty(spi->pio, spi->sm)) {
            *dst++ = *rxfifo;
            --rx_remain;
        }
    }
}

__force_inline static void __time_critical_func(pio_spi_write_blocking)(
        psram_spi_inst_t* spi,
        const uint8_t* src, const size_t src_len    
) {
    size_t tx_remain = src_len;

    io_rw_8 *txfifo = (io_rw_8 *) &spi->pio->txf[spi->sm];
    while (tx_remain) {
        if (!pio_sm_is_tx_fifo_full(spi->pio, spi->sm)) {
            *txfifo = *src++;
            --tx_remain;
        }
    }
}


static uint8_t wrbuffer[16];
//#define CINIT 0b00000000
#define CINIT 0b01110111

/**
 * @brief Write raw data to the PSRAM SPI PIO, driven by DMA without CPU
 * involvement. 
 *
 * It's recommended to use DMA when possible as it's higher speed. Used to send
 * raw commands to the PSRAM. This function is faster than
 * pio_spi_write_read_dma_blocking() if no data is to be read.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param src Pointer to the source data to write.
 * @param src_len Length of the source data in bytes.
 */
__force_inline static void __time_critical_func(pio_spi_write_dma_blocking)(
        psram_spi_inst_t* spi,
        const uint8_t* src, const size_t src_len
) {
#if defined(PSRAM_WAITDMA)
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
#endif // PSRAM_WAITDMA
    int i=0;
    int k=0;
#ifdef QSPI    
    wrbuffer[k++]=src[i++];
    wrbuffer[k++]=src[i++];
    uint8_t c=src[i++];
    uint8_t d=CINIT;
    if (c & 0b10000000) d |= 0b1000000;
    if (c & 0b01000000) d |= 0b0001000;
    wrbuffer[k++] = d;
    d=CINIT;
    if (c & 0b00100000) d |= 0b1000000;
    if (c & 0b00010000) d |= 0b0001000;
    wrbuffer[k++] = d;
    d=CINIT;
    if (c & 0b00001000) d |= 0b1000000;
    if (c & 0b00000100) d |= 0b0001000;
    wrbuffer[k++] = d;
    d=CINIT;
    if (c & 0b00000010) d |= 0b1000000;
    if (c & 0b00000010) d |= 0b0001000;
    wrbuffer[k++] = d;
    while (i<src_len) wrbuffer[k++]=nibconv[src[i++]];
#else
    while (i<src_len) wrbuffer[k++]=src[i++];
#endif
    dma_channel_transfer_from_buffer_now(spi->write_dma_chan, wrbuffer, k);
//    dma_channel_transfer_from_buffer_now(spi->write_dma_chan, src, src_len);
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
}

/**
 * @brief Write and read raw data to the PSRAM SPI PIO, driven by DMA without CPU
 * involvement. 
 *
 * It's recommended to use DMA when possible as it's higher speed. Used to send
 * raw commands and receive data from the PSRAM. Usually the @c psram_write* and
 * @c psram_read* commands should be used instead.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param src Pointer to the source data to write.
 * @param src_len Length of the source data in bytes.
 * @param dst Pointer to the destination for read data, if any. Set to 0 or NULL
 * if no data is to be read.
 * @param dst_len Length of the destination data in bytes. Set to 0 if no data
 * is to be read.
 */
__force_inline static void __time_critical_func(pio_spi_write_read_dma_blocking)(
        psram_spi_inst_t* spi,
        const uint8_t* src, const size_t src_len,
        uint8_t* dst, const size_t dst_len
) {
#if defined(PSRAM_WAITDMA)
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
#endif // PSRAM_WAITDMA
    int i=0;
    int k=0;
#ifdef QSPI    
    wrbuffer[k++]=src[i++];
    wrbuffer[k++]=src[i++];
    uint8_t c=src[i++];
    uint8_t d=CINIT;
    if (c & 0b10000000) d |= 0b1000000;
    if (c & 0b01000000) d |= 0b0001000;
    wrbuffer[k++] = d;
    d=CINIT;
    if (c & 0b00100000) d |= 0b1000000;
    if (c & 0b00010000) d |= 0b0001000;
    wrbuffer[k++] = d;
    d=CINIT;
    if (c & 0b00001000) d |= 0b1000000;
    if (c & 0b00000100) d |= 0b0001000;
    wrbuffer[k++] = d;
    d=CINIT;
    if (c & 0b00000010) d |= 0b1000000;
    if (c & 0b00000010) d |= 0b0001000;
    wrbuffer[k++] = d;
    while (i<src_len) wrbuffer[k++]=nibconv[src[i++]];
#else
    while (i<src_len) wrbuffer[k++]=src[i++];
#endif    
    dma_channel_transfer_from_buffer_now(spi->write_dma_chan, wrbuffer, k);
//    dma_channel_transfer_from_buffer_now(spi->write_dma_chan, src, src_len);
    dma_channel_transfer_to_buffer_now(spi->read_dma_chan, dst, dst_len);
    dma_channel_wait_for_finish_blocking(spi->write_dma_chan);
    dma_channel_wait_for_finish_blocking(spi->read_dma_chan);
}




/**
 * @brief Initialize the PSRAM over SPI. This function must be called before
 * accessing PSRAM.
 *
 * @param pio The PIO instance to use (PIO0 or PIO1).
 * @param sm The state machine number in the PIO module to use. If -1 is given,
 * will use the first available state machine.
 * @param clkdiv Clock divisor for the state machine. At RP2040 speeds greater
 * than 280MHz, a clkdiv >1.0 is needed. For example, at 400MHz, a clkdiv of
 * 1.6 is recommended.
 * @param fudge Whether to insert an extra "fudge factor" of one clock cycle
 * before reading from the PSRAM. Depending on your PCB layout or PSRAM type,
 * you may need to do this.
 *
 * @return The PSRAM configuration instance. This instance should be passed to
 * all PSRAM access functions.
 */
psram_spi_inst_t psram_spi_init_clkdiv(PIO pio, int sm, float clkdiv, bool fudge);

/**
 * @brief Initialize the PSRAM over SPI. This function must be called before
 * accessing PSRAM.
 *
 * Defaults to a clkdiv of 1.0. This function is provided for backwards
 * compatibility. Use psram_spi_init_clkdiv instead if you want a clkdiv other
 * than 1.0.
 *
 * @param pio The PIO instance to use (PIO0 or PIO1).
 * @param sm The state machine number in the PIO module to use. If -1 is given,
 * will use the first available state machine.
 *
 * @return The PSRAM configuration instance. This instance should be passed to
 * all PSRAM access functions.
 */
psram_spi_inst_t psram_spi_init(PIO pio, int sm);

#ifdef QSPI
#define READ_CMD 0xebu
#define WRITE_CMD 0x38u
//#define READ_CMD 0x0bu
//#define WRITE_CMD 0x02u
#else
#define READ_CMD 0x0bu
#define WRITE_CMD 0x02u
#endif


static uint8_t write8_command[] = {
#ifdef QSPI
    40/4,       // 40 bits write
    0,          // 0 bits read
#else
    40,         // 40 bits write
    0,          // 0 bits read
#endif 
    WRITE_CMD,  // Write command
    0, 0, 0,    // Address
    0           // 8 bits data
};
/**
 * @brief Write 8 bits of data to a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the write is
 * complete.
 *
 * This function is optimized to write 8 bits as quickly as possible to the
 * PSRAM as opposed to the more general-purpose psram_write() function.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to write to.
 * @param val Value to write.
 */
__force_inline static void psram_write8(psram_spi_inst_t* spi, uint32_t addr, uint8_t val) {
    write8_command[3] = addr >> 16;
    write8_command[4] = addr >> 8;
    write8_command[5] = addr;
    write8_command[6] = val;
#ifdef PIO_SPI
    pio_spi_write_dma_blocking(spi, write8_command, sizeof(write8_command));
    //pio_spi_write_blocking(spi, write8_command, sizeof(write8_command));
#else
    spi_write_blocking(PSRAM_SPIREG, write8_command, sizeof(write8_command));
#endif
};

static uint8_t read8_command[] = {
#ifdef QSPI
    40/4,       // 40 bits write
    8/4,        // 8 bits read
#else
    40,         // 40 bits write
    8,          // 8 bits read
#endif   
    READ_CMD,   // Fast read command
    0, 0, 0,    // Address
    0           // 8 delay cycles
};
/**
 * @brief Read 8 bits of data from a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the read is
 * complete.
 *
 * This function is optimized to read 8 bits as quickly as possible from the
 * PSRAM as opposed to the more general-purpose psram_read() function.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to read from.
 * @return The data at the specified address.
 */
__force_inline static uint8_t psram_read8(psram_spi_inst_t* spi, uint32_t addr) {
    read8_command[3] = addr >> 16;
    read8_command[4] = addr >> 8;
    read8_command[5] = addr;
    uint8_t val; 
#ifdef PIO_SPI
    pio_spi_write_read_dma_blocking(spi, read8_command, sizeof(read8_command), &val, 1);
//    pio_spi_write_read_blocking(spi, read8_command, sizeof(read8_command), &val, 1);
#else
    uint8_t vals[3]; 
    spi_write_read_blocking(PSRAM_SPIREG, read8_command, &vals[0], sizeof(read8_command));
    val = vals[0];
#endif
    return val;
};

static uint8_t write16_command[] = {
#ifdef QSPI
    48/4,       // 48 bits write
    0,          // 0 bits read
#else
    48,         // 48 bits write
    0,          // 0 bits read
#endif    
    WRITE_CMD,  // Write command
    0, 0, 0,    // Address
    0, 0        // 16 bits data
};
/**
 * @brief Write 16 bits of data to a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the write is
 * complete.
 *
 * This function is optimized to write 16 bits as quickly as possible to the
 * PSRAM as opposed to the more general-purpose psram_write() function.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to write to.
 * @param val Value to write.
 */

__force_inline static void psram_write16(psram_spi_inst_t* spi, uint32_t addr, uint16_t val) {
    write16_command[3] = addr >> 16;
    write16_command[4] = addr >> 8;
    write16_command[5] = addr;
    write16_command[6] = val;
    write16_command[7] = val >> 8;
#ifdef PIO_SPI
    pio_spi_write_dma_blocking(spi, write16_command, sizeof(write16_command));
    //pio_spi_write_blocking(spi, write16_command, sizeof(write16_command));
#else
    spi_write_blocking(PSRAM_SPIREG, write16_command, sizeof(write16_command));
#endif
};

static uint8_t read16_command[] = {
#ifdef QSPI
    40/4,       // 40 bits write
    16/4,       // 16 bits read
#else
    40,         // 40 bits write
    16,         // 16 bits read
#endif    
    READ_CMD,   // Fast read command
    0, 0, 0,    // Address
    0           // 8 delay cycles
};
/**
 * @brief Read 16 bits of data from a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the read is
 * complete.
 *
 * This function is optimized to read 16 bits as quickly as possible from the
 * PSRAM as opposed to the more general-purpose psram_read() function.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to read from.
 * @return The data at the specified address.
 */
__force_inline static uint16_t psram_read16(psram_spi_inst_t* spi, uint32_t addr) {
    read16_command[3] = addr >> 16;
    read16_command[4] = addr >> 8;
    read16_command[5] = addr;
    uint16_t val;
#ifdef PIO_SPI
    pio_spi_write_read_dma_blocking(spi, read16_command, sizeof(read16_command), (unsigned char*)&val, 2);
//    pio_spi_write_read_blocking(spi, read16_command, sizeof(read16_command), (unsigned char*)&val, 2);
    //pio_spi_write_read_blocking(spi, read16_command, sizeof(read16_command), vals, 3);
#else
    uint8_t vals[3]; 
    spi_write_read_blocking(PSRAM_SPIREG, read16_command, &vals[0], sizeof(read16_command));
    val=vals[0]+vals[1]<<8;
#endif
    return val;
};

/*
static uint8_t write_command[] = {
    0,          // n bits write
    0,          // 0 bits read
#ifdef QSPI
    0x38u,      // Write QUAD command
#else
    0x02u,      // Write command
#endif
    0, 0, 0     // Address
};
*/
/**
 * @brief Write @c count bytes of data to a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the write is
 * complete.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to write to.
 * @param src Pointer to the source data to write.
 * @param count Number of bytes to write.
 */
/*
__force_inline static void psram_writen(psram_spi_inst_t* spi, const uint32_t addr, const uint8_t* src, const size_t count) {
    // Break the address into three bytes and send read command
    write_command[0] = (4 + count) * 8;
    write_command[3] = addr >> 16;
    write_command[4] = addr >> 8;
    write_command[5] = addr;
#ifdef PIO_SPI
    pio_spi_write_dma_blocking(spi, write_command, sizeof(write_command));
    //pio_spi_write_dma_blocking(spi, src, count);
#else
#endif
};
*/

static uint8_t read_command[] = {
#ifdef QSPI
    40/4,       // 40 bits write
    0,          // n bits read
#else
    40,         // 40 bits write
    0,          // n bits read
#endif   
    READ_CMD,   // Fast read command
    0, 0, 0,    // Address
    0           // 8 delay cycles
};
/**
 * @brief Read @c count bits of data from a given address to the PSRAM SPI PIO,
 * driven by DMA without CPU involvement, blocking until the read is
 * complete.
 *
 * @param spi The PSRAM configuration instance returned from psram_spi_init().
 * @param addr Address to read from.
 * @param dst Pointer to the destination for the read data.
 * @param count Number of bytes to read.
 */
__force_inline static void psram_readn(psram_spi_inst_t* spi, const uint32_t addr, uint8_t* dst, const size_t count) {
#ifdef QSPI
    read_command[1] = count * 2;
#else
    read_command[1] = count * 8;
#endif
    read_command[3] = addr >> 16;
    read_command[4] = addr >> 8;
    read_command[5] = addr;
#ifdef PIO_SPI
    pio_spi_write_read_dma_blocking(spi, read_command, sizeof(read_command), dst, count);
#else
#endif
};

static uint8_t nib[16] = {
    0b0000, 
    0b1000, 
    0b0100, 
    0b1100, 
    0b0010, 
    0b1010, 
    0b0110, 
    0b1110, 
    0b0001, 
    0b1001, 
    0b0101, 
    0b1101, 
    0b0011, 
    0b1011, 
    0b0111, 
    0b1111
};

static void psram_init_nib(void) {
    for (unsigned int i=0; i<256;i++) {
        nibconv[i]=(nib[i>>4]<<4)+nib[i&0xf];
    }    
};

#ifdef __cplusplus
}
#endif
